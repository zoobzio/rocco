# Codecov configuration for rocco
# Documentation: https://docs.codecov.io/docs/codecov-yaml

# Repository configuration
codecov:
  # Require Codecov to find CI builds
  require_ci_to_pass: true

  # Max number of CI builds to wait for
  max_report_age: 24h

  # Disable default Codecov comments and statuses until properly configured
  notify:
    after_n_builds: 1
    wait_for_ci: true

# Coverage configuration
coverage:
  # Round coverage to 2 decimal places
  precision: 2
  round: down

  # Coverage range for color coding
  # 0-70%: red, 70-80%: yellow, 80-100%: green
  range: "70...100"

  # Status checks
  status:
    # Overall project coverage
    project:
      default:
        # Coverage can drop by 1% and still pass
        threshold: 1%
        target: 90%  # Target coverage percentage
        base: auto
        if_ci_failed: error
        if_not_found: error
        informational: false
        only_pulls: false

      # Separate status for core library
      library:
        target: 90%
        threshold: 1%
        paths:
          - "*.go"
          - "!*_test.go"
        if_ci_failed: error

    # Coverage for changed files in PR
    patch:
      default:
        target: 90%  # New code should have 90% coverage
        threshold: 0%
        base: auto
        if_ci_failed: error
        if_not_found: error
        informational: false
        only_pulls: true

# Files to ignore in coverage
ignore:
  - "**/*_test.go"      # Test files themselves
  - "**/mock_*.go"      # Mock files
  - "**/testdata/**"    # Test data
  - "docs/**"           # Documentation
  - ".github/**"        # GitHub workflows
  - "vendor/**"         # Vendor directory (if exists)

# Comment configuration for PRs
comment:
  # Post comment on PRs
  layout: "reach,diff,flags,tree"
  behavior: default
  require_changes: false
  require_base: false
  require_head: true
  show_carryforward_flags: true
  show_critical_paths: true

  # Comment when coverage changes by at least 0.5%
  after_n_builds: 1

# Component configuration
component_management:
  # Define individual components
  individual_components:
    - component_id: handlers
      name: HTTP Handlers
      paths:
        - "handler*.go"
        - "!*_test.go"

    - component_id: engine
      name: Engine
      paths:
        - "engine*.go"
        - "!*_test.go"

    - component_id: docs
      name: Documentation
      paths:
        - "docs*.go"
        - "openapi*.go"
        - "!*_test.go"

    - component_id: core
      name: Core
      paths:
        - "*.go"
        - "!handler*.go"
        - "!engine*.go"
        - "!docs*.go"
        - "!openapi*.go"
        - "!*_test.go"

# Flags for different test runs
flags:
  # Unit tests
  unit:
    carryforward: true

# GitHub Checks
github_checks:
  annotations: true

# Parsers configuration
parsers:
  go:
    partials_as_hits: true

# Upload configuration
uploads:
  # Disable uploading for forks
  disable_default_path_fixes: false
